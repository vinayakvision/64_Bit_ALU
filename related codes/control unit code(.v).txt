module ControlUnit (
    input [5:0] opcode,
    output reg [3:0] alu_op
);
    always @(opcode) begin
        case (opcode)
            6'b000000: alu_op = 4'b0000; // ADD
            6'b000001: alu_op = 4'b0001; // SUB
            6'b000010: alu_op = 4'b0010; // MUL
            6'b000011: alu_op = 4'b0011; // DIV
            6'b000100: alu_op = 4'b0100; // AND
            6'b000101: alu_op = 4'b0101; // OR
            6'b000110: alu_op = 4'b0110; // XOR
            6'b000111: alu_op = 4'b0111; // NOT
            6'b001000: alu_op = 4'b1000; // Left shift
            6'b001001: alu_op = 4'b1001; // Right shift
            6'b001010: alu_op = 4'b1010; // Arithmetic right shift
            6'b001011: alu_op = 4'b1011; // Greater than
            6'b001100: alu_op = 4'b1100; // Less than
            6'b001101: alu_op = 4'b1101; // Equality
            default: alu_op = 4'b1111;   // Default
        endcase
    end
endmodule
